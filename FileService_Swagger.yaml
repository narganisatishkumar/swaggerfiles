openapi: 3.0.0
info:
  title: File Service - OSDU
  description: |
    # Key Concepts

    This service allows users to manage files on the  Data Platform. File Management includes uploads, downloads and creation of metadata record for the file. 
  version: 1.0.0
servers:
  - url: VALID_FILE_SERVICE_BASE_URL
paths:
  /getLocation:
    post:
      tags:
      - File Service
      summary: Get a location in Landing Zone to upload a file.
      description: |
        Create a new location in the landing zone to upload a file.
        
        **Required roles**: 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.
      parameters:
        - name: data-partition-id
          in: header
          description: Specifies the data partition to use. This should either be the
            partition name or crm account ID associated with the partition.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: opendes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationRequest'
      responses:
        "200":
          description: |
            Created location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationResponse'
        "400":
          description: Bad user input. Mandatory fields missing or unacceptable value passed to API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "401":
          description: Invalid/Expired Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "404":
          description: Record Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
      security:
      - bearer: []
      - appkey: []
  /v1/files/UploadURL:
    get:
      tags:
      - File Service
      summary: Get a location in Landing Zone to upload a file.
      description: |-
        Gets a temporary signed URL to upload a file.The generated URL is time bound and expires after 24 hours.

        User will receive a FileSource in the response.This is the relative path where the uploaded file will persist.
        Once the file is uploaded, FileSource can then be used to post metadata of the file. The uploaded file gets automatically deleted, if the metadata is not posted within 24 hours of uploading the file.
        
        
        **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.
      
      operationId: Get the location to upload a file
      parameters:
      - name: data-partition-id
        in: header
        description: Specifies the data partition to use. This should either be the
          partition name or crm account ID associated with the partition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: opendes
      responses:
        "200":
          description: |
            Created location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceLocationResponse'
        "400":
          description: Bad user input. Mandatory fields missing or unacceptable value passed to API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "401":
          description: Invalid/Expired Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
      security:
      - bearer: []
      - appkey: []
  /v1/files/metadata:
    post:
      tags:
      - File Service
      summary: Creates a metadata for a file
      description: |-
        This API creates a metadata record for a file that is already uploaded. The Metadata is linked to the file via `FileSource` provided in the request body. 
        
        If `FileSource` attribute is missing in the request body or there is no file present, then the request fails with an error.
        
        When metadata is successfully updated in the system, it returns the `Id` of the file metadata record.

        **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.
      operationId: Publish file metadata for a file.
      parameters:
      - name: data-partition-id
        in: header
        description: Specifies the data partition to use. This should either be the
          partition name or crm account ID associated with the partition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: opendes
      requestBody:
        description: File metadata content
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Record'
      responses:
        201:
          description: Metadata created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetadataResponse'
        400:
          description: Bad user input. Mandatory fields missing or unacceptable value
            passed to API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        401:
          description: Invalid/Expired Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        404:
          description: Record Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
      security:
      - bearer: []
      - appkey: []
  /v1/files/{Id}/metadata:
    get:
      tags:
        - File Service
      description: >-
        Gets the latest version of File metadata record identified by the given id.
        

        **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors'
        or 'users.datalake.admins' or 'users.datalake.ops'.
      operationId: Gets metadata record for the given id
      summary: Gets metadata record for the given id
      parameters:
        - name: data-partition-id
          in: header
          description: >-
            Specifies the data partition to use. This should either be the
            partition name or crm account ID associated with the partition.
          required: true
          schema:
            type: string
            example: opendes
        - name: Id
          description: File metadata record Id.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordVersion'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        '401':
          description: Invalid/Expired Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        '404':
          description: Record Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
      security:
        - bearer: []
        - appkey: []
  /v1/files/{Id}/DownloadURL:
    get:
      tags:
      - File Service
      summary: Gets a URL to download the file
      description: |-
        Gets a URL for downloading the file associated with the unique `id`. URL is only valid for 1 hour.

        **Required roles**: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins' or 'users.datalake.ops'.
      operationId: Gets URL to download the file associated with the given id.
      parameters:
      - name: data-partition-id
        in: header
        description: Specifies the data partition to use. This should either be the
          partition name or crm account ID associated with the partition.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: opendes
      - name: Id
        in: path
        description: File Metadata record Id.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadResponse'
        400:
          description: Bad user input. Mandatory fields missing or unacceptable value
            passed to API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        401:
          description: Invalid/Expired Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        404:
          description: Record Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
      security:
        - bearer: []
        - appkey: []
  
  
  /getFileLocation:
    post:
      tags:
      - File Service (Internal)
      description: |
        Returns file `Location` and `Driver`.
      parameters:
        - name: data-partition-id
          in: header
          description: Specifies the data partition to use. This should either be the partition name or crm account ID associated with the partition.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: opendes
      security:
        - bearer: []
        - appkey: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileLocationRequest'
      responses:
        '200':
          description: |
            File location
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileLocationResponse'
        400:
          description: Bad user input. Mandatory fields missing or unacceptable value
            passed to API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        401:
          description: Invalid/Expired Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
  /getFileList:
    post:
      tags:
      - File Service (Internal)
      description: |
        Allows the application to audit the attempted file uploads. The method is internal and isn't available for third-party applications.
      parameters:
        - name: data-partition-id
          in: header
          description: Specifies the data partition to use. This should either be the
            partition name or crm account ID associated with the partition.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: opendes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileListRequest'
      responses:
        '200':
          description: |
            File list page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileListResponse'
        400:
          description: Bad user input. Mandatory fields missing or unacceptable value
            passed to API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        401:
          description: Invalid/Expired Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'     
  /getFile:
    post:
      tags:
      - File API
      description: |
        Get File API yet to implement.
      parameters:
        - name: data-partition-id
          in: header
          description: Specifies the data partition to use. This should either be the
            partition name or crm account ID associated with the partition.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: opendes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileRequest'
      responses:
        '200':
          description: |
            File list page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResponse'
        400:
          description: Bad user input. Mandatory fields missing or unacceptable value
            passed to API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        401:
          description: Invalid/Expired Credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationError'    
          
  
components:
  schemas:
    LocationRequest:
      type: object
      properties:
        FileID:
          $ref: '#/components/schemas/FileID'
    LocationResponse:
      type: object
      properties:
        FileID:
          $ref: '#/components/schemas/FileID'
        Location:
          type: object
          additionalProperties:
            type: string
          example:
            SignedURL: 'GCS signed URL'
    SourceLocationResponse:
      type: object
      properties:
        FileID:
          $ref: '#/components/schemas/FileID'
        Location:
          type: object
          properties:
            SignedURL:
              type: string
              example: 'GCS signed URL'
            FileSource:
              type: string
              description: 'Relative location of file'
              example: 'AXB564XVCY\SHVCU7632'
    files:
      title: File Metadata
      required:
        - FileSource
      type: object
      properties:
        SchemaFormatTypeID:
          type: string
          description: Schema Format Type ID
          pattern: ^srn:<namespace>:reference-data\\/SchemaFormatType:[^:]+:[0-9]*$          
        PreLoadFilePath: 
          description: File system path to the data file as it existed before loading to the data platform
          type: string
        FileSource: 
          description: Relative file path for the data in the file
          type: string
        FileSize: 
          description: Length of file in bytes
          type: integer
        EncodingFormatTypeID: 
          type: string
          description: Encoding Format Type ID
          pattern: ^srn:<namespace>:reference-data\\/EncodingFormatType:[^:]+:[0-9]*$
        Endian: 
          description: Endianness of binary value. Enumeration- \BIG\ \LITTLE\.  If absent applications will need to interpret from context indicators.
          type: string
          enum: [
              BIG
              LITTLE
            ]
        LossyCompressionIndicator: 
          description: Boolean that warns that an imperfect compression algorithm has been applied to the bulk binary data.  Details of the compression method need to be discovered from the format properties and file access methods.
          type: boolean
        CompressionMethodTypeID: 
          type: string
          description: Name of a compression algorithm applied to the data as stored.
          pattern: ^srn:<namespace>:reference-data\\/CompressionMethodType:[^:]+:[0-9]*$
        CompressionLevel: 
          description: Number indicating degree of fidelity present in bulk data resulting from compression.  Meaning of number depends on algorithm.
          type: number
        Checksum: 
          description: MD5 checksum of file bytes - a 32 byte hexadecimal number
          type: string
          pattern: ^[0-9a-fA-F]32}$
        VectorHeaderMapping: 
          description: Array of objects which define the meaning and format of a tabular structure used in a binary file as a header.  The initial use case is the trace headers of a SEG-Y file.  Note that some of this information may be repeated in the SEG-Y EBCDIC header.
          type: array
          items: 
            type: object
            properties: 
                KeyName: 
                  description: SRN of a reference value for a name of a property header such as INLINE CDPX.
                  type: string
                  pattern: ^srn:<namespace>:reference-data\\/HeaderKeyName:[^:]+:[0-9]*$
                
                WordFormat: 
                  description: SRN of a reference value for binary data types such as INT UINT FLOAT IBM_FLOAT ASCII EBCDIC.
                  type: string
                  pattern: ^srn:<namespace>:reference-data\\/WordFormatType:[^:]+:[0-9]*$
                
                WordWidth: 
                  description: Size of the word in bytes.
                  type: integer
                
                Position: 
                  description: Beginning byte position of header value 1 indexed.
                  type: integer
                
                UoM: 
                  description: SRN to units of measure reference if header standard is not followed.
                  type: string
                  pattern: ^srn:<namespace>:reference-data\\/UnitOfMeasure:[^:]+:[0-9]*$
                
                ScalarIndicator: 
                  description: Enumerated string indicating whether to use the normal scalar field for scaling this field (STANDARD) no scaling (NOSCALE) or override scalar (OVERRIDE).  Default is current STANDARD (such as SEG-Y rev2).
                  type: string
                  enum: [
                    STANDARD
                    NOSCALE
                    OVERRIDE
                  ]
                
                ScalarOverride: 
                  description: Scalar value (as defined by standard) when a value present in the header needs to be overwritten for this value.
                  type: number
        ExtensionProperties: 
          title: File DMS Extension Properties
          type: object
          properties: 
             Name: 
                description: The name of the file. Note- this is an additional property, which is not part of OSDU File.1.0.0
                example: File
                title: File Name
                type: string
             Classification: 
                description: The well-known entity classification code.
                example: Raw File
                title: File Classification
                type: string
             Description: 
                description: A text describing the entity.
                example: An text further describing this file example.
                title: Entity Description
                type: string
             ExternalIds: 
                description: An array of identities (e.g. some kind if URL to be resolved in an external data store) which links to external realizations of the same entity.
                format: link
                items: 
                  type: string                
                title: Array of External IDs
                type: array
             
             FileDateCreated: 
                description: The UTC date time of the file creation
                example: 2013-03-22T11:16:03Z
                format: date-time
                title: Creation Date and Time
                type: string
             FileDateModified: 
                description: The UTC date time of the last file modification
                example: 2013-03-22T11:16:03Z
                format: date-time
                title: Last Modification Date and Time
                type: string
             FileContentsDetails: 
                $ref: '#/components/schemas/fileDetails'
             relationships: 
                $ref: '#/components/schemas/relationships'
      description: >-
        The file data container containing all necessary details of the file
        record
    fileDetails:
      title: Opaque/Generic File Content Details
      type: object
      properties:
        TargetKind:
          title: Target Schema ID
          type: string
          description: The target kind or schema ID which is to be used by the parser.
          example: os:npd:wellbore:1:*.*
        FileType:
          title: File Type
          type: string
          description: Type of File to decide what kind of ingestion to be triggered
          example: csv
        FrameOfReference:
          title: Frame of Reference for data present in file.
          type: array
          description: The list metaItem definitions which maps a named frame of
            reference symbol or name to the self-contained persistableReference.
          items:
            $ref: '#/components/schemas/metaItem'
        ExtensionProperties:
          $ref: '#/components/schemas/extensionProperties'
        ParentReference:
          title: Parent Reference
          type: string
          description: The parent reference for this file.
          example: CSBE0417
      description: Further information about File being uploaded.
    extensionProperties:
      title: Extension Property
      type: object
      description: Useful for providing the user defined attributes to be associated with the file metadata record.
      properties:
        kind:
          title: Extension Schema ID
          type: string
          description: The schema ID for this schema fragment
          example: os:npd:csvFileExtDetails:1.0.0
    DownloadResponse:
      title: Download URL response
      properties:
        SignedURL:
          type: string
    FileMetadataResponse:
      title: File Metadata response
      properties:
        Id:
          type: string
    GetFileSignedURLSRequest:
      type: object
      properties:
        srn:
          description: A list of SRNs to fetch
          type: array
          items:
            type: string
      example:
        srns:
          - srn:some-valid-srn
          - srn:some-invalid-srn
    GetFileSignedURLSResponse:
      type: object
      properties:
        unprocessed:
          description: A list of SRNs which could not be processed
          type: array
          items:
            type: string
        processed:
          description: Each key is equal to an SRN that was able to be processed
          type: object
          additionalProperties:
            description: Signed URL and/or related properties for the processed SRN
            type: object
            properties:
              signedUrl:
                type: string
      example:
        unprocessed:
          - srn:some-invalid-srn
        processed:
          srn:some-valid-srn:
            signedUrl: https://...
    FileLocationRequest:
      type: object
      properties:
        FileID:
          $ref: '#/components/schemas/FileID'
    FileLocationResponse:
      type: object
      properties:
        Driver:
          $ref: '#/components/schemas/Driver'
        Location:
          type: string
    FileListRequest:
      type: object
      properties:
        TimeFrom:
          $ref: '#/components/schemas/DateTime'
        TimeTo:
          $ref: '#/components/schemas/DateTime'
        PageNum:
          type: integer
        Items:
          type: integer
        UserID:
          type: string
    FileListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/FileLocation'
        number:
          type: integer
        numberOfElements:
          type: integer
        size:
          type: integer
    FileRequest:
      type : object
      properties:
        FileID:
          type: string
    FileResponse:
      type: object
    FileID:
      type: string
      pattern: ^[\w,\s-]+(\.\w+)?$
    Record:
      description: Metadata record.
      type: object
      required:
        - legal
        - data
        - acl
        - kind
      properties:
        id:
          type: string
          readOnly: true
          description: Unique identifier generated by the system for the file metadata record. 
        kind:
          type: string
          example: osdu:wks:file:1.0.0
          description: Kind of data being ingested. Must follow the naming
            convention:data-Partition-Id}:dataset-name}:record-type}:version}.
        acl:
          $ref: '#/components/schemas/acl'
        legal:
          $ref: '#/components/schemas/legal'
        data: 
          $ref: '#/components/schemas/files'
        ancestry:
          $ref: '#/components/schemas/linkList'
    RecordVersion:
      description: Metadata record.
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: Unique identifier generated by the system for the file metadata record. 
        kind:
          type: string
          example: osdu:wks:file:1.0.0
          description: Kind of data being ingested. Must follow the naming
            convention:data-Partition-Id}:dataset-name}:record-type}:version}.
        acl:
          $ref: '#/components/schemas/acl'
        legal:
          $ref: '#/components/schemas/legal'
        data: 
          $ref: '#/components/schemas/files'
        ancestry:
          $ref: '#/components/schemas/linkList'
        version:
          description: The version number of this OSDU resource; set by the framework.
          title: Version Number
          type: integer
          format: int64
          example: 1831253916104085
    DateTime:
      type: string
      format: date-time
    Driver:
      type: string
      enum:
        - GCP
        - AWS
    FileLocation:
      type: object
      properties:
        FileID:
          $ref: '#/components/schemas/FileID'
        Driver:
          $ref: '#/components/schemas/Driver'
        Location:
          type: string
        CreatedAt:
          type: string
          format: date-time
        CreatedBy:
          type: string
    acl:
      required:
      - owners
      - viewers
      type: object
      properties:
        viewers:
          type: array
          description: List of valid groups which will have view/read privileges over
            the record.
          items:
            type: string
        owners:
          type: array
          description: List of valid groups which will have write privileges over
            the record.
          items:
            type: string
    legal:
      title: Legal Meta Data
      type: object
      properties:
        legaltags:
          title: Legal Tags
          type: array
          description: The list of legal tags, see compliance API.
          items:
            type: string
        otherRelevantDataCountries:
          title: Other Relevant Data Countries
          type: array
          description: The list of other relevant data countries using the ISO 2-letter
            codes, see compliance API.
          items:
            type: string
        status:
          title: Legal Status
          type: string
          description: The legal status.
      description: Legal meta data like legal tags, relevant other countries, legal
        status.
    metaItem:
      title: Frame of Reference Meta Data Item (FoR of File)
      required:
      - kind
      - persistableReference
      type: object
      properties:
        kind:
          title: Reference Kind
          type: string
          description: The kind of reference, unit, measurement, CRS or azimuth reference.
          enum:
          - CRS
          - Unit
          - Measurement
          - AzimuthReference
          - DateTime
        name:
          title: Name or Symbol
          type: string
          description: The name of the CRS or the symbol/name of the unit
          example: '["NAD27 * OGP-Usa Conus / North Dakota South [32021,15851]","ft"]'
        persistableReference:
          title: Persistable Reference
          type: string
          description: The persistable reference string uniquely identifying the CRS
            or Unit
          example: '{"scaleOffset":{"scale":0.3048006096012192,"offset":0.0},"symbol":"ftUS","baseMeasurement":{"ancestry":"Length","type":"UM"},"type":"USO"}'
        propertyNames:
          title: Attribute Names
          type: array
          description: The list of property names, to which this meta data item provides
            Unit/CRS context to. Data structures, which come in a single frame of
            reference, can register the property name, others require a full path
            like "data.structureA.propertyB" to define a unique context.
          example:
          - elevationFromMsl
          - '"totalDepthMdDriller'
          - wellHeadProjected
          items:
            type: string
        propertyValues:
          title: Attribute Names
          type: array
          description: The list of property values, to which this meta data item provides
            Unit/CRS context to. Typically a unit symbol is a value to a data structure;
            this symbol is then registered in this propertyValues array and the persistableReference
            provides the absolute reference.
          example:
          - F
          - ftUS
          - deg
          items:
            type: string
        uncertainty:
          title: Uncertainty
          type: number
          description: The uncertainty of the values measured given the unit or CRS
            unit.
      description: A meta data item, which allows the association of named properties
        or property values to a Unit/Measurement/CRS/Azimuth/Time context.
    relationships:
      title: Relationships
      type: object
      properties:
        parentEntity:
          $ref: '#/components/schemas/toOneRelationship'
        relatedItems:
          $ref: '#/components/schemas/toManyRelationship'
      description: All relationships from this entity.
    toManyRelationship:
      properties:
        confidences:
          title: Relationship Confidences
          type: array
          description: The confidences of the relationships. Keep all the arrays ordered
            and aligned.
          items:
            type: number
        ids:
          title: Related Object Id
          type: array
          description: The ids of the related objects. It is populated for an explicit
            relationship where the target entity is present as a record in the data
            ecosystem. Keep all the arrays ordered and aligned.
          format: link
          items:
            type: string
        names:
          title: Related Object Names
          type: array
          description: The names or natural keys of the related objects. Keep all
            the arrays ordered and aligned.
          items:
            type: string
        versions:
          title: To Many Relationship
          type: array
          description: The specific version numbers of the related instances. This
            is only specified if a specific version is required. If not populated
            the last version is implied. Keep all the arrays ordered and aligned.
          items:
            type: number
            format: int64
      description: A relationship from this entity to many other entities either by
        natural key (name) or explicit id, optionally classified by confidence level.
    toOneRelationship:
      title: To One Relationship
      type: object
      properties:
        confidence:
          title: Relationship Confidence
          type: number
          description: The confidence of the relationship. If the property is absent
            a well-known relation is implied.
          example: 1
        id:
          title: Related Object Id
          type: string
          description: The id of the related object in the Data Ecosystem. If set,
            the id has priority over the natural key in the name property.
          format: link
          example: data_partition:namespace:entity_845934c40e8d922bc57b678990d55722
        name:
          title: Related Object Name
          type: string
          description: The name or natural key of the related object. This property
            is required if the target object id could not (yet) be identified.
          example: Survey ST2016
        version:
          title: Entity Version Number
          type: number
          description: The version number of the related entity. If no version number
            is specified, the last version is implied.
          format: int64
      description: A relationship from this entity to one other entity either by natural
        key (name) or id, optionally classified by confidence level
    linkList:
      title: Link List
      type: object
      additionalProperties:
        title: Link List
        type: array
        description: An array of one or more entity references in the data lake.
        items:
          type: string
      description: A named list of entities in the data lake as a dictionary item. 
    ApplicationError:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorModel'
      description: An error that occurs during normal application logic.
    ErrorModel:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        code:
          type: integer
          format: int32
        message:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string
        reason:
          type: string
        domain:
          type: string
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    appkey:
      type: apiKey
      name: appkey
      in: header